{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitProjects\\\\smart-brain\\\\src\\\\App.js\";\nimport './App.css';\nimport react, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 185\n      }\n    }\n  }\n};\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  //where we are aon the page\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    password: '',\n    entries: '',\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        //197\n        topRow: clarifaiFace.top_row * height,\n        //59\n        rightCol: width - clarifaiFace.right_col * width,\n        //195.7\n        bottomRow: height - clarifaiFace.bottom_row * height //274\n\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input: this.state.input //send the id to the server. it will update that user's count\n\n        })\n      }).then(response => response.json()).then(response => {\n        if (response) {\n          fetch(\"https://git.heroku.com/ancient-forest-08678.git/image\", {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id //send the id to the server. it will update that user's count\n\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            })); //use object assign (the object to update, {the element to add})\n          }).catch(console.log);\n          this.displayFaceBox(this.calculateFaceLocation(response));\n        }\n      }).catch(e => console.log('error', e));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signin') {\n        this.setState(initialState);\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.loadUser = user => {\n      this.setState({\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          password: user.password,\n          entries: user.entries,\n          joined: user.joined\n        }\n      });\n    };\n\n    this.state = initialState;\n  }\n  /*\n    componentDidMount(){\n      fetch ('http://localhost:3000/')\n      .then(response=> response.json())\n      .then(data => console.log(data));\n    }\n  \n    //google secures access from other computers, by using Access-Control-Allow-Origin. this is first set to no cors\n    //to enable access from other computers, we have to use npm cors\n  */\n\n\n  render() {\n    let section;\n\n    if (this.state.route === 'signin') {\n      section = /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 22\n      }, this);\n    } else if (this.state.route === 'register') {\n      section = /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 22\n      }, this);\n    } else {\n      section = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          userName: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onSubmit: this.onSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: this.state.box,\n          imageUrl: this.state.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: this.state.isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Particles, {\n        params: particlesOptions,\n        className: \"particles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/gitProjects/smart-brain/src/App.js"],"names":["react","Component","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","Particles","particlesOptions","particles","number","value","density","enable","value_area","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","password","entries","joined","App","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","setState","onInputChange","event","target","onSubmit","state","fetch","method","headers","body","JSON","stringify","then","response","json","count","Object","assign","catch","console","log","e","onRouteChange","loadUser","render","section"],"mappings":"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","sourcesContent":["import './App.css';\nimport react, {Component} from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\n\nconst particlesOptions = {\nparticles: {                 \n  number: {\n    value: 30,\n    density:{\n      enable:true,\n      value_area:185,\n      }\n    }\n  }\n}                \n\nconst initialState = {\n      input: '',\n      imageUrl: '',\n      box:{},\n      route: 'signin',//where we are aon the page\n      isSignedIn: false,\n      user:{\n        id: '',\n        name: '',\n        email: '',\n        password: '',\n        entries: '',\n        joined: '',\n      }\n    }\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = initialState;\n  }\n\n/*\n  componentDidMount(){\n    fetch ('http://localhost:3000/')\n    .then(response=> response.json())\n    .then(data => console.log(data));\n  }\n\n  //google secures access from other computers, by using Access-Control-Allow-Origin. this is first set to no cors\n  //to enable access from other computers, we have to use npm cors\n*/\n\n  calculateFaceLocation = (data) =>{\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return{\n      leftCol: (clarifaiFace.left_col) * width,//197\n      topRow: (clarifaiFace.top_row) * height,//59\n      rightCol: width - (clarifaiFace.right_col * width),//195.7\n      bottomRow: height - (clarifaiFace.bottom_row * height),//274\n    }\n  }\n  displayFaceBox = (box) =>{\n    this.setState ({box: box});\n  }\n\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value})\n  }\n\n  onSubmit = () =>{\n    this.setState ({imageUrl : this.state.input})\n    fetch (\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n          method : 'post',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            input: this.state.input//send the id to the server. it will update that user's count\n            })\n          })\n          .then (response => response.json())\n    .then(response=>{\n        if (response){\n          fetch (\"https://git.heroku.com/ancient-forest-08678.git/image\", {\n          method : 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: this.state.user.id//send the id to the server. it will update that user's count\n            })\n          })\n          .then(response => response.json())\n          .then(count =>{\n              this.setState(Object.assign(this.state.user, {entries: count}));//use object assign (the object to update, {the element to add})\n          }).catch(console.log);\n          this.displayFaceBox(this.calculateFaceLocation(response));\n        }\n      })\n    .catch(e=>console.log('error',e))\n  }\n\n  onRouteChange = (route) =>{\n    if (route === 'signin'){\n      this.setState(initialState);\n    }else if (route === 'home'){\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route});\n  }\n\n  loadUser = (user) =>{\n    this.setState({user:{\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        entries: user.entries,\n        joined: user.joined,\n    }})\n  }\n  render(){\n    let section;\n\n    if (this.state.route === 'signin'){\n          section = (<Signin loadUser={this.loadUser}onRouteChange={this.onRouteChange}/>);\n      }else if(this.state.route === 'register'){\n          section = (<Register loadUser = {this.loadUser} onRouteChange = {this.onRouteChange}/>);\n      }else{\n          section = (\n          <div>     \n            <Logo /> \n            <Rank userName = {this.state.user.name} entries = {this.state.user.entries}/>\n            <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit}/>\n            <FaceRecognition box = {this.state.box} imageUrl={this.state.imageUrl}/>\n          </div>\n        )\n      }\n\n    return (\n      <div className=\"App\">\n        <Navigation isSignedIn={this.state.isSignedIn} onRouteChange = {this.onRouteChange} />\n        <Particles params={particlesOptions} className='particles'/>\n        {section}\n      </div>\n    );\n  }  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}