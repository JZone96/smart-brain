{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitProjects\\\\facerecognitionbrain\\\\src\\\\App.js\";\nimport './App.css';\nimport react, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: 'f9e837ab0386499e9583b19c25f83b74'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 185\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      console.log(data);\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        //197\n        topRow: clarifaiFace.top_row * height,\n        //59\n        rightCol: width - clarifaiFace.right_col * width,\n        //195.7\n        bottomRow: height - clarifaiFace.bottom_row * height //274\n\n      };\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            //fetch will automatically use GET method, but we want POST\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            console.log(count);\n          });\n          this.displayFaceBox(this.calculateFaceLocation(response));\n        }\n      }).catch(e => console.log('error', e));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signin') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.loadUser = user => {\n      this.setState({\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          password: user.password,\n          entries: user.entries,\n          joined: user.joined\n        }\n      });\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      //where we are aon the page\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        password: '',\n        entries: '',\n        joined: ''\n      }\n    };\n  }\n  /*\n    componentDidMount(){\n      fetch ('http://localhost:3000/')\n      .then(response=> response.json())\n      .then(data => console.log(data));\n    }\n  \n    //google secures access from other computers, by using Access-Control-Allow-Origin. this is first set to no cors\n    //to enable access from other computers, we have to use npm cors\n  */\n\n\n  render() {\n    let section;\n\n    if (this.state.route === 'signin') {\n      section = /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 22\n      }, this);\n    } else if (this.state.route === 'register') {\n      section = /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 22\n      }, this);\n    } else {\n      section = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          userName: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onSubmit: this.onSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: this.state.box,\n          imageUrl: this.state.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: this.state.isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Particles, {\n        params: particlesOptions,\n        className: \"particles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/gitProjects/facerecognitionbrain/src/App.js"],"names":["react","Component","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","Particles","Clarifai","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","constructor","calculateFaceLocation","data","console","log","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","onSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","fetch","method","headers","body","JSON","stringify","id","user","json","count","catch","e","onRouteChange","route","isSignedIn","loadUser","name","email","password","entries","joined","render","section"],"mappings":"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","sourcesContent":["import './App.css';\nimport react, {Component} from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai'\n\nconst app = new Clarifai.App({\n  apiKey : 'f9e837ab0386499e9583b19c25f83b74'\n});\n\nconst particlesOptions = {\nparticles: {                 \n  number: {\n    value: 30,\n    density:{\n      enable:true,\n      value_area:185,\n      }\n    }\n  }\n}                \n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box:{},\n      route: 'signin',//where we are aon the page\n      isSignedIn: false,\n      user:{\n        id: '',\n        name: '',\n        email: '',\n        password: '',\n        entries: '',\n        joined: '',\n      }\n    }\n  }\n\n/*\n  componentDidMount(){\n    fetch ('http://localhost:3000/')\n    .then(response=> response.json())\n    .then(data => console.log(data));\n  }\n\n  //google secures access from other computers, by using Access-Control-Allow-Origin. this is first set to no cors\n  //to enable access from other computers, we have to use npm cors\n*/\n\n  calculateFaceLocation = (data) =>{\n    console.log(data)\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width, height);\n    return{\n      leftCol: (clarifaiFace.left_col) * width,//197\n      topRow: (clarifaiFace.top_row) * height,//59\n      rightCol: width - (clarifaiFace.right_col * width),//195.7\n      bottomRow: height - (clarifaiFace.bottom_row * height),//274\n    }\n  }\n  displayFaceBox = (box) =>{\n    console.log(box)\n    this.setState ({box: box});\n  }\n\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value})\n  }\n\n  onSubmit = () =>{\n    this.setState ({imageUrl : this.state.input})\n    app.models.predict(Clarifai.FACE_DETECT_MODEL,this.state.input)\n    .then(response=>{\n        if (response){\n          fetch (\"http://localhost:3000/image\", {//fetch will automatically use GET method, but we want POST\n          method : 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: this.state.user.id\n            })\n          })\n          .then(response => response.json())\n          .then(count =>{\n            console.log(count);\n          });\n          this.displayFaceBox(this.calculateFaceLocation(response));\n        }\n      })\n    .catch(e=>console.log('error',e))\n  }\n\n  onRouteChange = (route) =>{\n    if (route === 'signin'){\n      this.setState({isSignedIn: false});\n    }else if (route === 'home'){\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route});\n  }\n\n  loadUser = (user) =>{\n    this.setState({user:{\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        entries: user.entries,\n        joined: user.joined,\n    }})\n  }\n  render(){\n    let section;\n\n    if (this.state.route === 'signin'){\n          section = (<Signin loadUser={this.loadUser}onRouteChange={this.onRouteChange}/>);\n      }else if(this.state.route === 'register'){\n          section = (<Register loadUser = {this.loadUser} onRouteChange = {this.onRouteChange}/>);\n      }else{\n          section = (\n          <div>     \n            <Logo /> \n            <Rank userName = {this.state.user.name} entries = {this.state.user.entries}/>\n            <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit}/>\n            <FaceRecognition box = {this.state.box} imageUrl={this.state.imageUrl}/>\n          </div>\n        )\n      }\n\n    return (\n      <div className=\"App\">\n        <Navigation isSignedIn={this.state.isSignedIn} onRouteChange = {this.onRouteChange} />\n        <Particles params={particlesOptions} className='particles'/>\n        {section}\n      </div>\n    );\n  }  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}