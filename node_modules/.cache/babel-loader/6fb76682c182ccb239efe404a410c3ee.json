{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitProjects\\\\smart-brain\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport react, { Component, useState, useEffect } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\n/*\n  Particles API used for the background\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 185\n      }\n    }\n  }\n};\n/*const initialState = {\n      input: '',\n      imageUrl: '',\n      box:[{}],//turned into an array, to read more than one face\n      route: 'signin',//where we are an the page\n      isSignedIn: false,\n      user:{\n        id: '',\n        name: '',\n        email: '',\n        password: '',\n        entries: '',\n        joined: '',\n      }\n    }*/\n\nconst App = () => {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState([{}]);\n  const [route, setRoute] = useState('signin');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState({\n    id: '',\n    name: '',\n    email: '',\n    password: '',\n    entries: '',\n    joined: ''\n  });\n\n  const initialState = () => {\n    setInput('');\n    setImageUrl('');\n    setBox([{}]);\n    setRoute('signin');\n    setIsSignedIn(false);\n    setUser({\n      id: '',\n      name: '',\n      email: '',\n      password: '',\n      entries: '',\n      joined: ''\n    });\n  };\n  /*constructor(){\n    super();\n    this.state = initialState;\n  }*/\n\n  /*\n    Function that calculates face location based on coordinates given by CLARIFAI API\n    Returns an array with all the coordinates\n  */\n\n\n  const calculateFaceLocation = data => {\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    const faceCoordinates = data.outputs[0].data.regions;\n    let facesDetected = [];\n    faceCoordinates.forEach(face => {\n      const clarifaiFace = face.region_info.bounding_box;\n      const coordinates = {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n      facesDetected.push(coordinates);\n    });\n    return facesDetected;\n  };\n  /*\n    displayFaceBox takes locations of the box, and sets the 'box' state\n  */\n\n\n  const displayFaceBox = boxLocations => {\n    setBox(boxLocations);\n  };\n  /*\n    when the user pastes the link of the image in the input box, changes the 'input' state\n  */\n\n\n  const onInputChange = event => {\n    setInput(event.target.value);\n  };\n  /*\n    when the user submits the image link, this function send a request to the server.\n    the server handles the CLARIFAI API call, to detect all the faces.\n    The server send a response with all the detected faces, and calculateFaceLocation does the rest.\n    this response brings us in another fetch to the backend, to update the entries\n  */\n\n\n  const onSubmit = () => {\n    setImageUrl(input);\n    fetch(\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        input: input\n      })\n    }).then(response => response.json()).then(response => {\n      if (response) {\n        fetch(\"https://ancient-forest-08678.herokuapp.com/image\", {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: user.id //send the id to the server. it will update that user's count\n\n          })\n        }).then(response => response.json()).then(count => {\n          setUser(Object.assign(user, {\n            entries: count\n          })); //use object assign (the object to update, {the element to add})\n        }).catch(console.log);\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }\n    }).catch(e => console.log('error', e));\n  };\n\n  const onRouteChange = route => {\n    if (route === 'signin') {\n      initialState();\n    } else if (route === 'home') {\n      setIsSignedIn({\n        isSignedIn: true\n      });\n    }\n\n    setRoute({\n      route: route\n    });\n  };\n\n  const loadUser = user => {\n    setUser({\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        entries: user.entries,\n        joined: user.joined\n      }\n    });\n  };\n\n  let section;\n\n  if (route === 'signin') {\n    section = /*#__PURE__*/_jsxDEV(Signin, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 22\n    }, this);\n  } else if (route === 'register') {\n    section = /*#__PURE__*/_jsxDEV(Register, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 22\n    }, this);\n  } else {\n    section = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {\n        userName: user.name,\n        entries: user.entries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onSubmit: this.onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        boxes: box,\n        imageUrl: imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      isSignedIn: isSignedIn,\n      onRouteChange: this.onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Particles, {\n      params: particlesOptions,\n      className: \"particles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), section]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"gC0WebGOtVJZtvpBGEBKCxMcUkg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/gitProjects/smart-brain/src/App.js"],"names":["react","Component","useState","useEffect","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","Particles","particlesOptions","particles","number","value","density","enable","value_area","App","input","setInput","imageUrl","setImageUrl","box","setBox","route","setRoute","isSignedIn","setIsSignedIn","user","setUser","id","name","email","password","entries","joined","initialState","calculateFaceLocation","data","image","document","getElementById","width","Number","height","faceCoordinates","outputs","regions","facesDetected","forEach","face","clarifaiFace","region_info","bounding_box","coordinates","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","push","displayFaceBox","boxLocations","onInputChange","event","target","onSubmit","fetch","method","headers","body","JSON","stringify","then","response","json","count","Object","assign","catch","console","log","e","onRouteChange","loadUser","section"],"mappings":"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","sourcesContent":["import './App.css';\nimport react, {Component, useState, useEffect } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\n\n/*\n  Particles API used for the background\n*/\nconst particlesOptions = {\nparticles: {                 \n  number: {\n    value: 30,\n    density:{\n      enable:true,\n      value_area:185,\n      }\n    }\n  }\n}                \n\n\n/*const initialState = {\n      input: '',\n      imageUrl: '',\n      box:[{}],//turned into an array, to read more than one face\n      route: 'signin',//where we are an the page\n      isSignedIn: false,\n      user:{\n        id: '',\n        name: '',\n        email: '',\n        password: '',\n        entries: '',\n        joined: '',\n      }\n    }*/\nconst App = () => {\n\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState([{}]);\n  const [route, setRoute] = useState('signin');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState({\n                                    id: '',\n                                    name: '',\n                                    email: '',\n                                    password: '',\n                                    entries: '',\n                                    joined: '',\n                                  });\n\n  const initialState = () =>{\n  setInput('');\n  setImageUrl('');\n  setBox([{}]);\n  setRoute('signin');\n  setIsSignedIn(false);\n  setUser({\n                                    id: '',\n                                    name: '',\n                                    email: '',\n                                    password: '',\n                                    entries: '',\n                                    joined: '',\n                                  });\n}\n  /*constructor(){\n    super();\n    this.state = initialState;\n  }*/\n\n  \n\n\n/*\n  Function that calculates face location based on coordinates given by CLARIFAI API\n  Returns an array with all the coordinates\n*/\n  const calculateFaceLocation = (data) =>{\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    const faceCoordinates = data.outputs[0].data.regions;\n    let facesDetected = [];\n\n    faceCoordinates.forEach(face=>{\n      const clarifaiFace = face.region_info.bounding_box\n      const coordinates = {\n        leftCol: (clarifaiFace.left_col) * width,\n        topRow: (clarifaiFace.top_row) * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n      }\n      facesDetected.push(coordinates);\n    })\n\n    return facesDetected;\n  }\n  /*\n    displayFaceBox takes locations of the box, and sets the 'box' state\n  */\n  const displayFaceBox = (boxLocations) =>{\n        setBox(boxLocations);\n  }\n  /*\n    when the user pastes the link of the image in the input box, changes the 'input' state\n  */\n  const onInputChange = (event) =>{\n    setInput(event.target.value)\n  }\n  /*\n    when the user submits the image link, this function send a request to the server.\n    the server handles the CLARIFAI API call, to detect all the faces.\n    The server send a response with all the detected faces, and calculateFaceLocation does the rest.\n    this response brings us in another fetch to the backend, to update the entries\n  */\n  const onSubmit = () =>{\n    setImageUrl(input);\n    fetch (\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n          method : 'post',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            input: input\n            })\n          })\n          .then (response => response.json())\n    .then(response=>{\n        if (response){\n          fetch (\"https://ancient-forest-08678.herokuapp.com/image\", {\n          method : 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: user.id//send the id to the server. it will update that user's count\n            })\n          })\n          .then(response => response.json())\n          .then(count =>{\n              setUser(Object.assign(user, {entries: count}));//use object assign (the object to update, {the element to add})\n          }).catch(console.log);\n\n          this.displayFaceBox(this.calculateFaceLocation(response));\n        }\n      })\n    .catch(e=>console.log('error',e))\n  }\n\n  const onRouteChange = (route) =>{\n    if (route === 'signin'){\n      initialState();\n    }else if (route === 'home'){\n      setIsSignedIn({isSignedIn: true})\n    }\n    setRoute({route: route});\n  }\n\n  const loadUser = (user) =>{\n    setUser({user:{\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        entries: user.entries,\n        joined: user.joined,\n    }})\n  }\n    let section;\n\n    if (route === 'signin'){\n          section = (<Signin loadUser={this.loadUser}onRouteChange={this.onRouteChange}/>);\n      }else if(route === 'register'){\n          section = (<Register loadUser = {this.loadUser} onRouteChange = {this.onRouteChange}/>);\n      }else{\n          section = (\n          <div>     \n            <Logo /> \n            <Rank userName = {user.name} entries = {user.entries}/>\n            <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit}/>\n            <FaceRecognition boxes = {box} imageUrl={imageUrl}/>\n          </div>\n        )\n      }\n\n    return (\n      <div className=\"App\">\n        <Navigation isSignedIn={isSignedIn} onRouteChange = {this.onRouteChange} />\n        <Particles params={particlesOptions} className='particles'/>\n        {section}\n      </div>\n    );\n    \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}