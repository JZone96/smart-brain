{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitProjects\\\\smart-brain\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport ModifyUser from './components/Modify/Modify';\nimport Particles from 'react-particles-js';\n/*\n  Particles API used for the background\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 185\n      }\n    }\n  }\n};\n/* Declaring all the states, and setInitialState function*/\n\nconst App = () => {\n  _s();\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState([{}]);\n  const [route, setRoute] = useState('loading');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState({\n    id: '',\n    name: '',\n    email: '',\n    password: '',\n    entries: '',\n    joined: ''\n  });\n  const [text, setText] = useState(\"\");\n  let numberOfFaces;\n\n  const setInitialState = () => {\n    setInput('');\n    setImageUrl('');\n    setBox([{}]);\n    setRoute('signin');\n    setIsSignedIn(false);\n    setUser({\n      id: '',\n      name: '',\n      email: '',\n      password: '',\n      entries: '',\n      joined: ''\n    });\n  };\n  /*localStorage variable to store users id*/\n\n\n  window.onload = () => {\n    if (localStorage.userId && !isLoaded) {\n      setRoute('loading');\n      fetch(`https://ancient-forest-08678.herokuapp.com/profile/${localStorage.userId}`).then(response => response.json()).then(user => {\n        setUser({ ...user,\n          email: user.email,\n          entries: user.entries,\n          id: user.id,\n          joined: user.joined,\n          name: user.name\n        });\n        setIsLoaded(true);\n        setIsSignedIn(true);\n        setRoute('home');\n      }).catch(err => console.log('Broken Server :('));\n    } else {\n      setRoute('signin');\n    }\n  };\n  /*\n    Function that calculates face location based on coordinates given by CLARIFAI API\n    If there are faces in the image, returns an array with all the coordinates otherwise return false\n  */\n\n\n  const calculateFaceLocation = data => {\n    if (data.outputs[0].data.regions) {\n      numberOfFaces = data.outputs[0].data.regions.length;\n\n      if (numberOfFaces === 1) {\n        setText(`I've detected ${numberOfFaces} face`);\n      } else {\n        setText(`I've detected ${numberOfFaces} faces`);\n      }\n\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      const faceCoordinates = data.outputs[0].data.regions;\n      let facesDetected = [];\n      faceCoordinates.forEach(face => {\n        const clarifaiFace = face.region_info.bounding_box;\n        const coordinates = {\n          leftCol: clarifaiFace.left_col * width,\n          topRow: clarifaiFace.top_row * height,\n          rightCol: width - clarifaiFace.right_col * width,\n          bottomRow: height - clarifaiFace.bottom_row * height\n        };\n        facesDetected.push(coordinates);\n      });\n      return facesDetected;\n    } else {\n      setText(`No faces detected :(`);\n      return false;\n    }\n  };\n  /*\n    when the user submits the image link, this function send a request to the server.\n    the server handles the CLARIFAI API call, to detect all the faces.\n    The server send a response with all the detected faces, and calculateFaceLocation does the rest.\n    this response brings us in another fetch to the backend, to update the entries\n  */\n\n\n  const onSubmit = () => {\n    if (!input) {\n      setText(\"No Link provided\");\n    } else {\n      setImageUrl(input.target.value);\n      fetch(\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input: input.target.value\n        })\n      }).then(response => response.json()).then(response => {\n        if (response === 'unable to call API') {\n          setText(\"Image Not Found :(\");\n        } else {\n          fetch(\"https://ancient-forest-08678.herokuapp.com/image\", {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: user.id //send the id to the server. it will update that user's count\n\n            })\n          }).then(response => response.json()).then(count => {\n            if (response) {\n              setUser({ ...user,\n                entries: count\n              });\n            } else {\n              console.log(\"niente incremento \");\n            }\n          }).catch(console.log);\n          setBox(calculateFaceLocation(response));\n        }\n      }).catch(e => console.log('error', e));\n    }\n  };\n  /*\n    JSX PAGE \n    render is based on the route state\n  */\n\n\n  let section;\n\n  if (route === 'signin') {\n    section = /*#__PURE__*/_jsxDEV(Signin, {\n      loadUser: user => setUser(user),\n      onRouteChange: route => setRoute(route),\n      isSignedIn: value => setIsSignedIn(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 22\n    }, this);\n  } else if (route === 'register') {\n    section = /*#__PURE__*/_jsxDEV(Register, {\n      loadUser: user => setUser(user),\n      onRouteChange: route => setRoute(route),\n      isSignedIn: value => setIsSignedIn(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 22\n    }, this);\n  } else if (route === 'modify') {\n    section = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(ModifyUser, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this);\n  } else if (route === 'loading') {\n    return /*#__PURE__*/_jsxDEV(Particles, {\n      params: particlesOptions,\n      className: \"particles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this);\n  } else {\n    section = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {\n        userName: user.name,\n        entries: user.entries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: link => setInput(link),\n        onSubmit: () => onSubmit(),\n        text: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        boxes: box,\n        imageUrl: imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App flex flex-column\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: route => setRoute(route),\n        setInitialState: () => setInitialState(),\n        route: route\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Particles, {\n        params: particlesOptions,\n        className: \"particles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100\",\n      children: /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"2021 - Made by Jason Liberti\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"k8rIo/YohRyoo4YaL/m4Wq5ut68=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/gitProjects/smart-brain/src/App.js"],"names":["React","useState","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","ModifyUser","Particles","particlesOptions","particles","number","value","density","enable","value_area","App","isLoaded","setIsLoaded","input","setInput","imageUrl","setImageUrl","box","setBox","route","setRoute","isSignedIn","setIsSignedIn","user","setUser","id","name","email","password","entries","joined","text","setText","numberOfFaces","setInitialState","window","onload","localStorage","userId","fetch","then","response","json","catch","err","console","log","calculateFaceLocation","data","outputs","regions","length","image","document","getElementById","width","Number","height","faceCoordinates","facesDetected","forEach","face","clarifaiFace","region_info","bounding_box","coordinates","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","push","onSubmit","target","method","headers","body","JSON","stringify","count","e","section","link"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport ModifyUser from './components/Modify/Modify';\nimport Particles from 'react-particles-js';\n\n\n/*\n  Particles API used for the background\n*/\nconst particlesOptions = {\nparticles: {                 \n  number: {\n    value: 30,\n    density:{\n      enable:true,\n      value_area:185,\n      }\n    }\n  }\n}               \n/* Declaring all the states, and setInitialState function*/\nconst App = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState([{}]);\n  const [route, setRoute] = useState('loading');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState({\n                                    id: '',\n                                    name: '',\n                                    email: '',\n                                    password: '',\n                                    entries: '',\n                                    joined: '',\n                                  });\n  const [text, setText] = useState(\"\");\n  let numberOfFaces;\n\n  const setInitialState = () =>{\n  setInput('');\n  setImageUrl('');\n  setBox([{}]);\n  setRoute('signin');\n  setIsSignedIn(false);\n  setUser({\n            id: '',\n            name: '',\n            email: '',\n            password: '',\n            entries: '',\n            joined: '',\n          });\n}\n/*localStorage variable to store users id*/\nwindow.onload = () =>{\n      if (localStorage.userId && !isLoaded){\n        setRoute('loading');\n        fetch (`https://ancient-forest-08678.herokuapp.com/profile/${localStorage.userId}`)\n        .then(response => response.json())\n        .then(user=> {\n          setUser({\n            ...user, \n            email: user.email,\n            entries: user.entries,\n            id: user.id,\n            joined: user.joined,\n            name: user.name\n          });\n          setIsLoaded(true);\n          setIsSignedIn(true);\n          setRoute('home');\n        }).catch(err => console.log('Broken Server :(')) \n      }else{\n          setRoute('signin')\n      }\n}\n\n\n/*\n  Function that calculates face location based on coordinates given by CLARIFAI API\n  If there are faces in the image, returns an array with all the coordinates otherwise return false\n*/\n  const calculateFaceLocation = (data) =>{\n    if (data.outputs[0].data.regions){\n      numberOfFaces = data.outputs[0].data.regions.length;\n      if (numberOfFaces===1){\n          setText(`I've detected ${numberOfFaces} face`);\n      }else{\n          setText(`I've detected ${numberOfFaces} faces`);\n      }\n\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      const faceCoordinates = data.outputs[0].data.regions;\n      let facesDetected = [];\n\n      faceCoordinates.forEach(face=>{\n        const clarifaiFace = face.region_info.bounding_box\n        const coordinates = {\n          leftCol: (clarifaiFace.left_col) * width,\n          topRow: (clarifaiFace.top_row) * height,\n          rightCol: width - (clarifaiFace.right_col * width),\n          bottomRow: height - (clarifaiFace.bottom_row * height)\n        }\n        facesDetected.push(coordinates);\n      })\n      return facesDetected;\n    }else{\n      setText(`No faces detected :(`)\n      return false;\n    }\n  }\n\n  /*\n    when the user submits the image link, this function send a request to the server.\n    the server handles the CLARIFAI API call, to detect all the faces.\n    The server send a response with all the detected faces, and calculateFaceLocation does the rest.\n    this response brings us in another fetch to the backend, to update the entries\n  */\n  const onSubmit = () =>{\n\n    if (!input){\n      setText(\"No Link provided\")\n      \n    }else{\n      setImageUrl(input.target.value);\n      fetch (\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n              method : 'post',\n              headers: {'Content-Type': 'application/json'},\n              body: JSON.stringify({\n                input: input.target.value\n                })\n              })\n        .then (response => response.json())\n        .then(response=>{\n            if (response === 'unable to call API'){\n                setText(\"Image Not Found :(\")\n            }else{\n              fetch (\"https://ancient-forest-08678.herokuapp.com/image\", {\n                method : 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                  id: user.id//send the id to the server. it will update that user's count\n                  })\n                })\n                .then(response => response.json())\n                .then(count =>{\n                  if (response){\n                    setUser({...user, entries: count});\n                  }else{\n                    console.log(\"niente incremento \")\n                  }\n                }).catch(console.log);\n\n                setBox(calculateFaceLocation(response));\n                \n            }\n          }).catch(e=>console.log('error',e))\n    }\n    \n  }\n/*\n  JSX PAGE \n  render is based on the route state\n*/\n    let section;\n\n    if (route === 'signin' ){\n          section = (<Signin loadUser={(user)=> setUser(user)} onRouteChange={(route) => setRoute(route)} isSignedIn = {(value)=> setIsSignedIn(value)}/>);\n\n      }else if(route === 'register' ){\n          section = (<Register loadUser = {(user)=> setUser(user)} onRouteChange = {(route) => setRoute(route)} isSignedIn = {(value)=> setIsSignedIn(value)}/>);\n      }else if (route === 'modify'){\n          section = (\n            <div className = 'tc'>\n              <Logo/>\n              <ModifyUser user = {user}/>\n            </div> \n            )\n      }else if (route === 'loading' ){\n        \n        return(\n            <Particles params={particlesOptions} className='particles'/>\n          );\n      }else{\n        section = (\n          <div className='tc'>     \n            <Logo/> \n            <Rank userName = {user.name} entries = {user.entries}/>\n            <ImageLinkForm onInputChange={(link) => setInput(link)} onSubmit={()=>onSubmit()} text = {text}/>\n            <FaceRecognition boxes = {box} imageUrl={imageUrl}/>\n          </div>\n        )\n      }\n\n    return (\n      <div className=\"App flex flex-column\">\n        <div className=\"w-100\">\n          <Navigation isSignedIn={isSignedIn} \n                    onRouteChange = {(route) => setRoute(route)} \n                    setInitialState = {()=>setInitialState()}\n                    route = {route}/>\n          <Particles params={particlesOptions} className='particles'/>\n          {section}\n        </div>\n        <div className=\"w-100\">\n          <footer>\n            <div>\n              {\"2021 - Made by Jason Liberti\"}\n\n            </div>\n\n          </footer>\n        </div>\n      </div>\n    );\n    \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}