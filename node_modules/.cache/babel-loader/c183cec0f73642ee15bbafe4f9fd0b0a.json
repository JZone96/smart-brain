{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitProjects\\\\smart-brain\\\\src\\\\App.js\";\nimport './App.css';\nimport react, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\n/*\n  Particles API used for the background\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 185\n      }\n    }\n  }\n};\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: [{}],\n  //turned into an array, to read more than one face\n  route: 'signin',\n  //where we are an the page\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    password: '',\n    entries: '',\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      const faceCoordinates = data.outputs[0].data.regions;\n      let facesDetected = [];\n      faceCoordinates.forEach(face => {\n        const clarifaiFace = face.region_info.bounding_box;\n        const coordinates = {\n          leftCol: clarifaiFace.left_col * width,\n          topRow: clarifaiFace.top_row * height,\n          rightCol: width - clarifaiFace.right_col * width,\n          bottomRow: height - clarifaiFace.bottom_row * height\n        };\n        facesDetected.push(coordinates);\n      });\n      return facesDetected;\n    };\n\n    this.displayFaceBox = boxLocations => {\n      this.setState({\n        box: boxLocations\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input: this.state.input\n        })\n      }).then(response => response.json()).then(response => {\n        if (response) {\n          fetch(\"https://ancient-forest-08678.herokuapp.com/image\", {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id //send the id to the server. it will update that user's count\n\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            })); //use object assign (the object to update, {the element to add})\n          }).catch(console.log);\n          this.displayFaceBox(this.calculateFaceLocation(response));\n        }\n      }).catch(e => console.log('error', e));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signin') {\n        this.setState(initialState);\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.loadUser = user => {\n      this.setState({\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          password: user.password,\n          entries: user.entries,\n          joined: user.joined\n        }\n      });\n    };\n\n    this.state = initialState;\n  }\n  /*\n    Function that calculates face location based on coordinates given by CLARIFAI API\n    Returns an array with all the coordinates\n  */\n\n\n  render() {\n    let section;\n\n    if (this.state.route === 'signin') {\n      section = /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 22\n      }, this);\n    } else if (this.state.route === 'register') {\n      section = /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 22\n      }, this);\n    } else {\n      section = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          userName: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onSubmit: this.onSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          boxes: this.state.box,\n          imageUrl: this.state.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: this.state.isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Particles, {\n        params: particlesOptions,\n        className: \"particles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/gitProjects/smart-brain/src/App.js"],"names":["react","Component","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","Particles","particlesOptions","particles","number","value","density","enable","value_area","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","password","entries","joined","App","constructor","calculateFaceLocation","data","image","document","getElementById","width","Number","height","faceCoordinates","outputs","regions","facesDetected","forEach","face","clarifaiFace","region_info","bounding_box","coordinates","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","push","displayFaceBox","boxLocations","setState","onInputChange","event","target","onSubmit","state","fetch","method","headers","body","JSON","stringify","then","response","json","count","Object","assign","catch","console","log","e","onRouteChange","loadUser","render","section"],"mappings":"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","sourcesContent":["import './App.css';\nimport react, {Component} from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\n\n/*\n  Particles API used for the background\n*/\nconst particlesOptions = {\nparticles: {                 \n  number: {\n    value: 30,\n    density:{\n      enable:true,\n      value_area:185,\n      }\n    }\n  }\n}                \n\nconst initialState = {\n      input: '',\n      imageUrl: '',\n      box:[{}],//turned into an array, to read more than one face\n      route: 'signin',//where we are an the page\n      isSignedIn: false,\n      user:{\n        id: '',\n        name: '',\n        email: '',\n        password: '',\n        entries: '',\n        joined: '',\n      }\n    }\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = initialState;\n  }\n/*\n  Function that calculates face location based on coordinates given by CLARIFAI API\n  Returns an array with all the coordinates\n*/\n  calculateFaceLocation = (data) =>{\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    const faceCoordinates = data.outputs[0].data.regions;\n    let facesDetected = [];\n\n    faceCoordinates.forEach(face=>{\n      const clarifaiFace = face.region_info.bounding_box\n      const coordinates = {\n        leftCol: (clarifaiFace.left_col) * width,\n        topRow: (clarifaiFace.top_row) * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n      }\n      facesDetected.push(coordinates);\n    })\n\n    return facesDetected;\n  }\n  /*\n    displayFaceBox takes locations of the box, and sets the 'box' state\n  */\n  displayFaceBox = (boxLocations) =>{\n        this.setState ({box: boxLocations});\n  }\n  /*\n    when the user pastes the link of the image in the input box, changes the 'input' state\n  */\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value})\n  }\n  /*\n    when the user submits the image link, this function send a request to the server.\n    the server handles the CLARIFAI API call, to detect all the faces.\n    The server send a response with all the detected faces, and calculateFaceLocation does the rest.\n    this response brings us in another fetch to the backend, to update the entries\n  */\n  onSubmit = () =>{\n    this.setState ({imageUrl : this.state.input})\n    fetch (\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n          method : 'post',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            input: this.state.input\n            })\n          })\n          .then (response => response.json())\n    .then(response=>{\n        if (response){\n          fetch (\"https://ancient-forest-08678.herokuapp.com/image\", {\n          method : 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: this.state.user.id//send the id to the server. it will update that user's count\n            })\n          })\n          .then(response => response.json())\n          .then(count =>{\n              this.setState(Object.assign(this.state.user, {entries: count}));//use object assign (the object to update, {the element to add})\n          }).catch(console.log);\n\n          this.displayFaceBox(this.calculateFaceLocation(response));\n        }\n      })\n    .catch(e=>console.log('error',e))\n  }\n\n  onRouteChange = (route) =>{\n    if (route === 'signin'){\n      this.setState(initialState);\n    }else if (route === 'home'){\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route});\n  }\n\n  loadUser = (user) =>{\n    this.setState({user:{\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        entries: user.entries,\n        joined: user.joined,\n    }})\n  }\n  render(){\n    let section;\n\n    if (this.state.route === 'signin'){\n          section = (<Signin loadUser={this.loadUser}onRouteChange={this.onRouteChange}/>);\n      }else if(this.state.route === 'register'){\n          section = (<Register loadUser = {this.loadUser} onRouteChange = {this.onRouteChange}/>);\n      }else{\n          section = (\n          <div>     \n            <Logo /> \n            <Rank userName = {this.state.user.name} entries = {this.state.user.entries}/>\n            <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit}/>\n            <FaceRecognition boxes = {this.state.box} imageUrl={this.state.imageUrl}/>\n          </div>\n        )\n      }\n\n    return (\n      <div className=\"App\">\n        <Navigation isSignedIn={this.state.isSignedIn} onRouteChange = {this.onRouteChange} />\n        <Particles params={particlesOptions} className='particles'/>\n        {section}\n      </div>\n    );\n  }  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}