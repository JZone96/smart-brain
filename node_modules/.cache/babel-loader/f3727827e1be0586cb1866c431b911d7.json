{"ast":null,"code":"import _objectSpread from\"D:/gitProjects/smart-brain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/gitProjects/smart-brain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./App.css';import React,{useState}from'react';import Navigation from'./components/Navigation/Navigation.js';import Logo from'./components/Logo/Logo';import ImageLinkForm from'./components/ImageLinkForm';import Rank from'./components/Rank/Rank';import FaceRecognition from'./components/FaceRecognition/FaceRecognition';import Signin from'./components/Signin/Signin';import Register from'./components/Register/Register';import Particles from'react-particles-js';/*\n  Particles API used for the background\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var particlesOptions={particles:{number:{value:30,density:{enable:true,value_area:185}}}};var App=function App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),imageUrl=_useState4[0],setImageUrl=_useState4[1];var _useState5=useState([{}]),_useState6=_slicedToArray(_useState5,2),box=_useState6[0],setBox=_useState6[1];var _useState7=useState('signin'),_useState8=_slicedToArray(_useState7,2),route=_useState8[0],setRoute=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isSignedIn=_useState10[0],setIsSignedIn=_useState10[1];var _useState11=useState({id:'',name:'',email:'',password:'',entries:'',joined:''}),_useState12=_slicedToArray(_useState11,2),user=_useState12[0],setUser=_useState12[1];var _setInitialState=function setInitialState(){setInput('');setImageUrl('');setBox([{}]);setRoute('signin');setIsSignedIn(false);setUser({id:'',name:'',email:'',password:'',entries:'',joined:''});};/*\n  Function that calculates face location based on coordinates given by CLARIFAI API\n  Returns an array with all the coordinates\n*/var calculateFaceLocation=function calculateFaceLocation(data){var image=document.getElementById('inputimage');var width=Number(image.width);var height=Number(image.height);var faceCoordinates=data.outputs[0].data.regions;var facesDetected=[];faceCoordinates.forEach(function(face){var clarifaiFace=face.region_info.bounding_box;var coordinates={leftCol:clarifaiFace.left_col*width,topRow:clarifaiFace.top_row*height,rightCol:width-clarifaiFace.right_col*width,bottomRow:height-clarifaiFace.bottom_row*height};facesDetected.push(coordinates);});return facesDetected;};/*\n    when the user submits the image link, this function send a request to the server.\n    the server handles the CLARIFAI API call, to detect all the faces.\n    The server send a response with all the detected faces, and calculateFaceLocation does the rest.\n    this response brings us in another fetch to the backend, to update the entries\n  */var _onSubmit=function onSubmit(){setImageUrl(input.target.value);fetch(\"https://ancient-forest-08678.herokuapp.com/imageurl\",{method:'post',headers:{'Content-Type':'application/json'},body:JSON.stringify({input:input.target.value})}).then(function(response){return response.json();}).then(function(response){if(response){fetch(\"https://ancient-forest-08678.herokuapp.com/image\",{method:'put',headers:{'Content-Type':'application/json'},body:JSON.stringify({id:user.id//send the id to the server. it will update that user's count\n})}).then(function(response){return response.json();}).then(function(count){setUser(_objectSpread(_objectSpread({},user),{},{entries:count}));}).catch(console.log);setBox(calculateFaceLocation(response));}}).catch(function(e){return console.log('error',e);});};var section;if(route==='signin'){section=/*#__PURE__*/_jsx(Signin,{loadUser:function loadUser(user){return setUser(user);},onRouteChange:function onRouteChange(route){return setRoute(route);},isSignedIn:function isSignedIn(value){return setIsSignedIn(value);}});}else if(route==='register'){section=/*#__PURE__*/_jsx(Register,{loadUser:function loadUser(user){return setUser(user);},onRouteChange:function onRouteChange(route){return setRoute(route);},isSignedIn:function isSignedIn(value){return setIsSignedIn(value);}});}else{section=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Logo,{}),/*#__PURE__*/_jsx(Rank,{userName:user.name,entries:user.entries}),/*#__PURE__*/_jsx(ImageLinkForm,{onInputChange:function onInputChange(link){return setInput(link);},onSubmit:function onSubmit(){return _onSubmit();}}),/*#__PURE__*/_jsx(FaceRecognition,{boxes:box,imageUrl:imageUrl})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Navigation,{isSignedIn:isSignedIn,onRouteChange:function onRouteChange(route){return setRoute(route);},setInitialState:function setInitialState(){return _setInitialState();}}),/*#__PURE__*/_jsx(Particles,{params:particlesOptions,className:\"particles\"}),section]});};export default App;","map":{"version":3,"sources":["D:/gitProjects/smart-brain/src/App.js"],"names":["React","useState","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","Particles","particlesOptions","particles","number","value","density","enable","value_area","App","input","setInput","imageUrl","setImageUrl","box","setBox","route","setRoute","isSignedIn","setIsSignedIn","id","name","email","password","entries","joined","user","setUser","setInitialState","calculateFaceLocation","data","image","document","getElementById","width","Number","height","faceCoordinates","outputs","regions","facesDetected","forEach","face","clarifaiFace","region_info","bounding_box","coordinates","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","push","onSubmit","target","fetch","method","headers","body","JSON","stringify","then","response","json","count","catch","console","log","e","section","link"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\n\n/*\n  Particles API used for the background\n*/\nconst particlesOptions = {\nparticles: {                 \n  number: {\n    value: 30,\n    density:{\n      enable:true,\n      value_area:185,\n      }\n    }\n  }\n}                \n\nconst App = () => {\n\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState([{}]);\n  const [route, setRoute] = useState('signin');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState({\n                                    id: '',\n                                    name: '',\n                                    email: '',\n                                    password: '',\n                                    entries: '',\n                                    joined: '',\n                                  });\n\n  const setInitialState = () =>{\n  setInput('');\n  setImageUrl('');\n  setBox([{}]);\n  setRoute('signin');\n  setIsSignedIn(false);\n  setUser({\n            id: '',\n            name: '',\n            email: '',\n            password: '',\n            entries: '',\n            joined: '',\n          });\n}\n/*\n  Function that calculates face location based on coordinates given by CLARIFAI API\n  Returns an array with all the coordinates\n*/\n  const calculateFaceLocation = (data) =>{\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    const faceCoordinates = data.outputs[0].data.regions;\n    let facesDetected = [];\n\n    faceCoordinates.forEach(face=>{\n      const clarifaiFace = face.region_info.bounding_box\n      const coordinates = {\n        leftCol: (clarifaiFace.left_col) * width,\n        topRow: (clarifaiFace.top_row) * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n      }\n      facesDetected.push(coordinates);\n    })\n\n    return facesDetected;\n  }\n\n  /*\n    when the user submits the image link, this function send a request to the server.\n    the server handles the CLARIFAI API call, to detect all the faces.\n    The server send a response with all the detected faces, and calculateFaceLocation does the rest.\n    this response brings us in another fetch to the backend, to update the entries\n  */\n  const onSubmit = () =>{\n    setImageUrl(input.target.value);\n    fetch (\"https://ancient-forest-08678.herokuapp.com/imageurl\", {\n          method : 'post',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            input: input.target.value\n            })\n          })\n    .then (response => response.json())\n    .then(response=>{\n        if (response){\n          fetch (\"https://ancient-forest-08678.herokuapp.com/image\", {\n          method : 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: user.id//send the id to the server. it will update that user's count\n            })\n          })\n          .then(response => response.json())\n          .then(count =>{\n              setUser({...user, entries: count});\n          }).catch(console.log);\n\n          setBox(calculateFaceLocation(response));\n        }\n      })\n    .catch(e=>console.log('error',e))\n  }\n\n    let section;\n\n    if (route === 'signin'){\n          section = (<Signin loadUser={(user)=> setUser(user)} onRouteChange={(route) => setRoute(route)} isSignedIn = {(value)=> setIsSignedIn(value)}/>);\n      }else if(route === 'register'){\n          section = (<Register loadUser = {(user)=> setUser(user)} onRouteChange = {(route) => setRoute(route)} isSignedIn = {(value)=> setIsSignedIn(value)}/>);\n      }else{\n          section = (\n          <div>     \n            <Logo /> \n            <Rank userName = {user.name} entries = {user.entries}/>\n            <ImageLinkForm onInputChange={(link) => setInput(link)} onSubmit={()=>onSubmit()}/>\n            <FaceRecognition boxes = {box} imageUrl={imageUrl}/>\n          </div>\n        )\n      }\n\n    return (\n      <div className=\"App\">\n        <Navigation isSignedIn={isSignedIn} onRouteChange = {(route) => setRoute(route)} setInitialState = {()=>setInitialState()}/>\n        <Particles params={particlesOptions} className='particles'/>\n        {section}\n      </div>\n    );\n    \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}